#!/usr/bin/env python3
# encoding: utf-8
"""
RhythmicGroupingTracker downbeat tracking algorithm.

"""

from __future__ import absolute_import, division, print_function

import argparse

from madmom.audio.signal import SignalProcessor
from madmom.features import ActivationsProcessor
from madmom.features.tf_beats import TfRhythmicGroupingProcessor
from madmom.processors import IOProcessor, io_arguments


def main():
    """RhythmicGroupingTracker"""

    p = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description='''The RhythmicGroupingTracker program detects rhythmic groupings in audio.''')

    p.add_argument('--version', action='version',
                   version='RhythmicGroupingTracker')

    # input/output options
    io_arguments(p, output_suffix='.beats.txt')
    ActivationsProcessor.add_arguments(p)

    # signal processing arguments
    SignalProcessor.add_arguments(p, norm=False, gain=0)

    # parse arguments
    args = p.parse_args()

    # set immutable arguments
    args.fps = 100

    # print arguments
    if args.verbose:
        print(args)

    # input processor
    if args.load:
        # load the activations from file
        in_processor = ActivationsProcessor(mode='r', **vars(args))
    else:
        # use a RNN to predict the beats
        in_processor = TfRhythmicGroupingProcessor(**vars(args))

    # save the RNN beat activations to file
    out_processor = ActivationsProcessor(mode='w', **vars(args))

    # create an IOProcessor
    processor = IOProcessor(in_processor, out_processor)

    # and call the processing function
    args.func(processor, **vars(args))


if __name__ == '__main__':
    main()
