#!/usr/bin/env python3

import argparse
import csv
import glob
import os

import matplotlib.pyplot as plt
import numpy as np

from madmom.custom_processors import LabelOutputProcessor
from madmom.features.tf_beats import TfRhythmicGroupingPreProcessor
from madmom.processors import IOProcessor, _process


def main():
    """
    creates an npz file with the network inputs (filtered audio) and labels
    """
    parser = argparse.ArgumentParser()
    parser.add_argument('data_directory')
    parser.add_argument('--fps', action='store', type=float, default=100, help='frames per second [default=100]')
    args = parser.parse_args()

    setattr(args, 'frame_sizes', [1024, 2048, 4096])

    responses_dir = os.path.join(args.data_directory, "responses")
    samples_dir = os.path.join(args.data_directory, "samples")
    output_dir = os.path.join(args.data_directory, "dataset")
    if not os.path.exists(output_dir):
        os.mkdir(output_dir)

    output_path = os.path.join(output_dir, "dataset.npz")
    if os.path.exists(output_path):
        k = input("This will overwrite the existing file [{}]. [Y/n] ".format(output_path))
        if k in ['no', 'n', 'N', 'NO']:
            print("Aborting.")
            return

    # iterate over each trial (one person taking the study)
    trial_files = glob.glob(os.path.join(responses_dir, "*.csv"), recursive=False)
    sample_responses_dict = {}
    for trial_file in trial_files:
        trial_reader = csv.reader(open(trial_file, 'r'))

        # iterate over each time they heard the various samples
        for sample_instance in trial_reader:
            # iterate over each time stamp at which they indicated the start of a group
            responses = sample_instance[1].split(" ")
            sample_name = sample_instance[2]

            if sample_name not in sample_responses_dict:
                sample_responses_dict[sample_name] = []

            sample_responses_dict[sample_name].append([float(r) for r in responses])

    data = []
    labels = []
    sample_names = []
    for sample_name, responses in sample_responses_dict.items():
        sample_path = os.path.join(samples_dir, sample_name)
        preprocessor = TfRhythmicGroupingPreProcessor()
        if not os.path.exists(sample_path):
            raise ValueError("Sample path {} does not exist.".format(sample_path))

        infile = open(sample_path, 'rb')

        label_processor = LabelOutputProcessor(responses, args.fps)

        # create an IOProcessor
        processor = IOProcessor(preprocessor, label_processor)
        sample_data, sample_labels = _process((processor, infile, None, vars(args)))
        data.append(sample_data)
        labels.append(sample_labels)
        sample_names.append(sample_name)

    np.savez(output_path, x=data, labels=labels, sample_names=sample_names)


if __name__ == '__main__':
    main()
