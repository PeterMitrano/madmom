import argparse
import os
import csv
import glob

from madmom.custom_processors import ImShowOutputProcessor, SaveOutputProcessor, LabelOutputProcessor
from madmom.features.tf_beats import TfRhythmicGroupingPreProcessor
from madmom.processors import process_single, IOProcessor, SequentialProcessor


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('map_file')
    args = parser.parse_args()

    map_reader = csv.reader(open(args.map_file, 'r'))
    next(map_reader)  # skip header

    # iterate over each sample
    for row in map_reader:
        sample_path = os.path.join(os.path.dirname(args.map_file), row[0])
        responses_path = os.path.join(os.path.dirname(args.map_file), row[1], "*.csv")

        csv_files = glob.glob(responses_path, recursive=False)
        # iterate over each participant who responded to this sample
        all_responses_to_sample = []
        for csv_file in csv_files:
            csv_reader = csv.reader(open(csv_file, 'r'))
            # iterate over each trial in which the participant heard this sample
            for trial in csv_reader:
                responses = [float(r) for r in trial]
                all_responses_to_sample.append(responses)
                # TODO: make sure the start times are 0

        preprocessor = TfRhythmicGroupingPreProcessor()
        infile = open(sample_path, 'rb')
        outfile = 'dataset.npz'

        save_processor = SaveOutputProcessor()
        imshow_processor = ImShowOutputProcessor()
        label_processor = LabelOutputProcessor(all_responses_to_sample)

        # create an IOProcessor
        processor = IOProcessor(preprocessor, label_processor)
        process_single(processor, infile, outfile, **vars(args))


if __name__ == '__main__':
    main()